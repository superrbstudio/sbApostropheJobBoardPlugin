<?php

/**
 * PluginsbJobBoardJobTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginsbJobBoardJobTable extends Doctrine_Table
{
	/**
	 * Returns an instance of this class.
	 *
	 * @return object PluginsbJobBoardJobTable
	 */
	public static function getInstance()
	{
			return Doctrine_Core::getTable('sbJobBoardJob');
	}

	public static function getLocations()
	{
		$locations = array();

		$root = Doctrine_Query::create()
						->select('location')
						->from('sbJobBoardJob')
						->groupBy('Location')
						->orderBy('location');

		$locs = $root->execute(array(), Doctrine::HYDRATE_ARRAY);
		foreach($locs as $location){ $locations[$location['location']] = $location['location']; }
		return $locations;
	}

	public static function getSectors()
	{
		$sectors = array();

		$root = Doctrine_Query::create()
						->select('c.name as the_name, j.id')
						->from('sbJobBoardJob j')
						->innerJoin('j.Categories c')
						->orderBy('the_name');

		$sects = $root->execute(array(), Doctrine::HYDRATE_ARRAY);
		foreach($sects as $sector){ $sectors[$sector['the_name']] = $sector['the_name']; }
		return $sectors;
	}

	public static function getJobTypes()
	{
		$types = array();

		$root = Doctrine_Query::create()
						->select('j.type AS the_name')
						->from('sbJobBoardJob j')
						->groupBy('j.type')
						->orderBy('j.type');

		$typs = $root->execute(array(), Doctrine::HYDRATE_ARRAY);
		foreach($typs as $type){ $types[$type['the_name']] = $type['the_name']; }
		return $types;
	}

	/**
	 * Returns a Doctrine_Collection of jobs
	 *
	 * @param integer $limit The number of jobs to return
	 * @param boolean $active If the result includes active jobs
	 * @param boolean $expired If the result includes expired jobs
	 * @param string $order The column to use to order the results
	 * @param string $direction The direction to order the results
	 * @param array $params An array of search parameters
	 * @return Doctrine_Collection
	 */
	public static function getJobs($limit = 5, $active = true, $featured = false, $expired = false, $order = 'updated_at', $direction = 'DESC', $params = array())
	{
		$fast = sfConfig::get('app_a_fasthydrate', false);

		$root = Doctrine_Query::create()
						->select('j.*, c.*')
						->from('sbJobBoardJob j')
						->leftJoin('j.Categories c');

		if(isset($params['keywords']) and !empty($params['keywords']))
		{
			aTools::$searchService->addSearchToQuery($root, $params['keywords'], array('culture' => aTools::getUserCulture()));
		}

		if(isset($params['location']) and !empty($params['location']) and $params['location'] != 'any')
		{
			$root->andWhere('j.location = ?', $params['location']);
		}

		if(isset($params['sectors']) and !empty($params['sectors']) and $params['sectors'] != 'any')
		{
			$root->andWHere('c.name = ?', $params['sectors']);
		}

		if(isset($params['job_type']) and !empty($params['job_type']) and $params['job_type'] != 'any')
		{
			$root->andWHere('j.type = ?', $params['job_type']);
		}

		if(isset($params['times']) and !empty($params['times']) and $params['times'] != 'any')
		{
			$root->andWHere('j.updated_at >= ?', $params['times']);
		}


		if(is_bool($active))
		{
			$root->andWhere('j.active = ?', $active);
		}

		if(is_bool($featured))
		{
			$root->andWhere('j.featured = ?', $featured);
		}

		if(is_bool($expired))
		{
			// @TODO expired filter
		}

		if(!is_null($order) and !is_null($direction))
		{
			$root->orderBy('j.' . $order . ' ' . $direction);
		}

		if(is_numeric($limit))
		{
			$root->limit($limit);
		}

		return $root->execute(array(), $fast ? Doctrine::HYDRATE_ARRAY : Doctrine::HYDRATE_RECORD);
	}

	/**
	 * Returns an array of sbGoogleSitemapPage objects for use by the google sitemap plugin
	 * @return array
	 */
	public static function pagesForSitemap()
	{
		sfContext::getInstance()->getConfiguration()->loadHelpers(array('Url'));
		$return = array();
		$jobs = self::getJobs(null, true, null);

		foreach($jobs as $job)
		{
			$return[] = new sbGoogleSitemapPage(sfContext::getInstance()->getRequest()->getHost(), url_for('@sb_job_board_job_page?slug=' . $job['slug']), false, 'monthly', 0.8, strtotime($job['updated_at']));
		}

		return $return;
	}

	public static function currencySymbol($currency)
	{
		$currency = strtolower($currency);

		switch($currency)
		{
			case 'gbp':
				return '£';
				break;

			case 'eur':
				return '€';
				break;

			case 'usd':
				return '$';
				break;
		}

		return '¤';
	}

	public function addCategoriesForUser(sfGuardUser $user, $admin = false)
  {
    $q = $this->addCategories();
    return Doctrine::getTable('aCategory')->addCategoriesForUser($user, $admin, $q);
  }

	public function addCategories(Doctrine_Query $q=null)
  {
    if(is_null($q))
      $q = Doctrine::getTable('aCategory')->createQuery();

    $q->addOrderBy('aCategory.name');
    return $q;
  }
}
